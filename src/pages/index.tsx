import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { ListItem } from "@prisma/client";

import { trpc } from "../utils/trpc";
import { useEffect, useState } from "react";
import ItemModal from "../components/ItemModal";

import { HiX } from "react-icons/hi";
// arrow icon react-icons
import { HiArrowRight } from "react-icons/hi";

interface backlogListProps {
	items: ListItem[] | null;
	title: string;
}
const Home: NextPage = () => {
	const [items, setItems] = useState<ListItem[]>([]);
	const [showModal, setShowModal] = useState(false);
	const [backlogList, setBacklogList] = useState<backlogListProps[]>([
		{
			items: null,
			title: "Todo",
		},
		{
			items: null,
			title: "In Progress",
		},
		{
			items: null,
			title: "Done",
		},
	]);
	const { data: itemsData } = trpc.item.getItems.useQuery();
	const { mutate: deleteItem } = trpc.item.deleteItem.useMutation({
		onSuccess: (item) => {
			setItems((prev) => prev.filter((i) => i.id !== item.id));
		},
	});
	const { mutate: updateItem } = trpc.item.updateItem.useMutation({
		onSuccess: (item) => {
			setItems((prev) =>
				prev.map((i) => {
					if (i.id === item.id) {
						return item;
					}
					return i;
				})
			);
		},
	});
	useEffect(() => {
		if (itemsData) {
			setItems(itemsData);
		}
	}, [itemsData]);

	useEffect(() => {
		// const todo = items.filter(
		// 	(item) => item.stage.toUpperCase() === "TODO"
		// );
		// const inProgress = items.filter(
		// 	(item) => item.stage.toUpperCase() === "IN_PROGRESS"
		// );
		// const done = items.filter(
		// 	(item) => item.stage.toUpperCase() === "DONE"
		// );
		// setBacklogList([
		// 	{
		// 		items: todo,
		// 		title: "Todo",
		// 	},
		// 	{
		// 		items: inProgress,
		// 		title: "In Progress",
		// 	},
		// 	{
		// 		items: done,
		// 		title: "Done",
		// 	},
		// ]);
		let temp = [...backlogList];
		temp.forEach((list) => {
			list.items = items.filter(
				(item) => item.stage.toUpperCase() === list.title.toUpperCase()
			);
		});
		setBacklogList(temp);		
	}, [items]);

	const upStage = (item: ListItem) => {
		// const previousStageIndex = backlogList.findIndex(
		// 	(list) => list.title === item.stage
		// );
		// const newIndex = (previousStageIndex + 1)%backlogList.length;
		// const newStage = backlogList[newIndex]?.title;
		// setItems((prev) =>
		// 	prev.map((i) => {
		// 		if (i.id === item.id) {
		// 			return { ...i, stage: newStage? newStage : "TODO" };
		// 		}
		// 		return i;
		// 	})
		// );
		//get current stage index
		const currentStageIndex = backlogList.findIndex(
			(list) => list.title.toUpperCase() === item.stage.toUpperCase()
		);
		if (currentStageIndex === backlogList.length - 1) {
			return;
		}
		/*@ts-ignore*/
		updateItem({id: item.id, name: item.name,description: item.description, stage: backlogList[currentStageIndex + 1].title,});
		// setItems((prev) =>
		// 	prev.map((i) => {
		// 		if (i.id === item.id) {
		// 			{/*@ts-ignore*/}
		// 			console.log(backlogList[currentStageIndex + 1].title);
		// 			{/*@ts-ignore*/}
		// 			return { ...i, stage: backlogList[currentStageIndex + 1].title };
		// 		}
		// 		return i;
		// 	})
		// );
	};

	return (
		<>
			<Head>
				<title>Backlog-T3</title>
				<meta
					name="description"
					content="Generated by create-t3-app"
				/>
				<link
					rel="icon"
					href="/fav.svg"
				/>
			</Head>
			{showModal && (
				<ItemModal
					setShowModal={setShowModal}
					setItems={setItems}
				/>
			)}
			<main className="container mx-auto flex min-h-screen min-w-full flex-col items-center justify-start p-8 md:p-16">
				<div className="flex min-w-full items-center justify-between p-4">
					<h1 className="text-4xl font-bold text-gray-700">
						You current Backlog
					</h1>
					<button
						className="mt-4 rounded bg-violet-500 p-4 text-white transition duration-300 ease-in-out hover:bg-violet-800"
						onClick={() => setShowModal(true)}>
						Add new
					</button>
				</div>
				<div className="flex min-h-screen w-full items-start justify-start gap-4">
					{backlogList.map((list, index) => (
						<ul
							className="flex w-full flex-col items-center justify-start rounded bg-gray-100 p-4 shadow-lg"
							key={index}>
							<h2 className="mb-8 text-2xl font-bold text-gray-700">
								{list.title}
							</h2>

							{list.items?.map((item) => (
								<li
									key={item.id}
									draggable
									className="mb-4 flex w-full flex-col items-start justify-between rounded-lg bg-white p-4 shadow">
									<div className="flex w-full items-center justify-between">
										<h2 className="text-xl font-bold text-gray-700">
											{item.name}
										</h2>
										<HiArrowRight
											className="text-2xl text-gray-500"
											onClick={() => upStage(item)}
										/>
										<HiX
											className="cursor-pointer text-red-500"
											onClick={() => {
												deleteItem({ id: item.id });
											}}
										/>
									</div>
								</li>
							))}
						</ul>
					))}
				</div>
			</main>
		</>
	);
};

export default Home;
